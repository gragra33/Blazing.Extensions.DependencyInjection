<UserControl x:Class="WpfExample.Views.HomeView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:vm="clr-namespace:WpfExample.ViewModels"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance Type=vm:HomeViewModel}"
             d:DesignHeight="450" d:DesignWidth="800">
    <ScrollViewer VerticalScrollBarVisibility="Auto">
        <StackPanel Margin="20">
            <TextBlock Text="Welcome to the DI Demo App" 
                       FontSize="20" FontWeight="Bold" 
                       Margin="0,0,0,15"/>
            
            <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">
                This application demonstrates how <Bold>Blazing.Extensions.DependencyInjection</Bold> simplifies dependency injection in WPF applications with multiple tabs and ViewModels.
            </TextBlock>
            
            <Border Background="#F0F8FF" BorderBrush="#4682B4" BorderThickness="2" 
                    Padding="15" Margin="0,10,0,10" CornerRadius="5">
                <StackPanel>
                    <TextBlock Text="✨ Key Benefits:" FontWeight="Bold" FontSize="14" Margin="0,0,0,10"/>
                    <TextBlock TextWrapping="Wrap" Margin="0,0,0,5">
                        • <Bold>Automatic View-ViewModel binding:</Bold> Each view is automatically paired with its ViewModel via DI
                    </TextBlock>
                    <TextBlock TextWrapping="Wrap" Margin="0,0,0,5">
                        • <Bold>Tab-based architecture:</Bold> Each tab is a separate View/ViewModel pair, loaded dynamically
                    </TextBlock>
                    <TextBlock TextWrapping="Wrap" Margin="0,0,0,5">
                        • <Bold>Service injection:</Bold> Services are injected into ViewModels, not manually created
                    </TextBlock>
                    <TextBlock TextWrapping="Wrap" Margin="0,0,0,5">
                        • <Bold>Lifetime management:</Bold> Scoped, transient, and singleton services work seamlessly
                    </TextBlock>
                </StackPanel>
            </Border>

            <TextBlock Text="{Binding WelcomeMessage}" 
                       FontSize="14" FontStyle="Italic"
                       Margin="0,10,0,10" Foreground="#2F4F4F"
                       TextWrapping="Wrap"/>
            
            <TextBlock Text="{Binding LastRefreshed}" 
                       FontSize="12" 
                       Margin="0,0,0,10" Foreground="Gray"
                       TextWrapping="Wrap"/>
            
            <StackPanel Orientation="Horizontal" Margin="0,10,0,20">
                <Button Content="🔄 Refresh Welcome" 
                        Command="{Binding RefreshWelcomeCommand}"
                        Width="180" 
                        Padding="10,5" Margin="0,0,10,0"/>
                
                <Button Content="ℹ️ Show Info" 
                        Command="{Binding ShowInfoCommand}"
                        Width="150" 
                        Padding="10,5"/>
            </StackPanel>

            <Separator Margin="0,10,0,20"/>

            <TextBlock Text="🎯 View-First Pattern Benefits" FontSize="16" FontWeight="Bold" Margin="0,0,0,10"/>
            <Border Background="#FFF9E6" BorderBrush="#FFB800" BorderThickness="2" 
                    Padding="15" CornerRadius="5">
                <StackPanel>
                    <TextBlock TextWrapping="Wrap" Margin="0,0,0,5">
                        ✓ <Bold>Loose Coupling:</Bold> MainViewModel doesn't know about HomeViewModel
                    </TextBlock>
                    <TextBlock TextWrapping="Wrap" Margin="0,0,0,5">
                        ✓ <Bold>Independent Resolution:</Bold> Each View resolves its own ViewModel via DI
                    </TextBlock>
                    <TextBlock TextWrapping="Wrap" Margin="0,0,0,5">
                        ✓ <Bold>Separation of Concerns:</Bold> Each tab manages its own state
                    </TextBlock>
                    <TextBlock TextWrapping="Wrap">
                        ✓ <Bold>Easy Testing:</Bold> ViewModels can be tested independently
                    </TextBlock>
                </StackPanel>
            </Border>
        </StackPanel>
    </ScrollViewer>
</UserControl>
